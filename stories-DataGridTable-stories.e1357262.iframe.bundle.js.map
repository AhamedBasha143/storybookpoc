{"version":3,"file":"stories-DataGridTable-stories.e1357262.iframe.bundle.js","mappings":";;;;;;;;;;;AAcA;;;;;;AAQA;;;;AAMA;;;;;AAOA;;;;AAMA;;AAIA;;;AChCA;;;;;;AAQA;;;;;;;AASA;;;;;;;AASA;;;;AAMA;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;AAaA;;;;AAMA;AACA;;;AAKA;;;AAKA;;;;;;AAQA;;AAEA;;;;AAMA;;;;AAMA;;;;;;;;;AAWA;;;AAKA;;;;;;;;;;;;;;;;;;AAoBA;;;AAKA","sources":["webpack://my-storybook-new/./src/stories/CustomDialog.jsx","webpack://my-storybook-new/./src/stories/DataGridTable.jsx"],"sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst DialogOverlay = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 999;\r\n`;\r\n\r\nconst DialogContainer = styled.div`\r\n  background: white;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  width: 400px;\r\n  position: relative;\r\n`;\r\n\r\nconst DialogHeader = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst CloseButton = styled.button`\r\n  border: none;\r\n  background: transparent;\r\n  cursor: pointer;\r\n  font-size: 18px;\r\n`;\r\n\r\nconst DialogFooter = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst FooterButton = styled.button`\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst CustomDialog = ({ open, onClose, onOk }) => {\r\n  if (!open) return null;\r\n\r\n  return (\r\n    <DialogOverlay>\r\n      <DialogContainer>\r\n        <DialogHeader>\r\n          <h2>Dialog Header</h2>\r\n          <CloseButton onClick={onClose}>X</CloseButton>\r\n        </DialogHeader>\r\n        <div>\r\n          {/* Content can be customized here */}\r\n          <p>Content of the dialog goes here.</p>\r\n        </div>\r\n        <DialogFooter>\r\n          <FooterButton onClick={onOk}>OK</FooterButton>\r\n          <FooterButton onClick={onClose}>Cancel</FooterButton>\r\n        </DialogFooter>\r\n      </DialogContainer>\r\n    </DialogOverlay>\r\n  );\r\n};\r\n\r\nexport default CustomDialog;\r\n","import React, { useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { MdKeyboardArrowLeft, MdKeyboardArrowRight } from \"react-icons/md\";\r\nimport * as XLSX from \"xlsx\";\r\nimport CustomDialog from \"./CustomDialog\"; // Adjust the path to your CustomDialog component\r\nimport { RiFileExcel2Line } from \"react-icons/ri\";\r\nimport { FaRegFilePdf } from \"react-icons/fa\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\"; // For table generation in PDF\r\n\r\nconst TableContainer = styled.div`\r\n  width: 100%;\r\n  margin: 20px auto;\r\n`;\r\n\r\nconst TableButtonContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  gap: 0.5rem;\r\n  margin-bottom: 3px;\r\n  align-items: center;\r\n`;\r\n\r\nconst ExcelContainer = styled.div`\r\n  font-size: 28px;\r\n  color: black;\r\n  &:hover {\r\n    color: blue;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst PDFContainer = styled.div`\r\n  font-size: 28px;\r\n  color: black;\r\n  &:hover {\r\n    color: blue;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst InputContainer = styled.div`\r\n  position: relative;\r\n  margin: 16px 0;\r\n  width: 96%;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  width: 97%;\r\n  padding: 16px 12px 8px;\r\n  padding-bottom: 16px;\r\n  font-size: 16px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  outline: none;\r\n  transition: border-color 0.3s;\r\n\r\n  &:focus {\r\n    border-color: #007bff;\r\n  }\r\n\r\n  &:focus + label,\r\n  &:not(:placeholder-shown) + label {\r\n    transform: translate(0, -28px);\r\n    font-size: 20px;\r\n    color: #007bff;\r\n  }\r\n`;\r\n\r\nconst FloatingLabel = styled.label`\r\n  position: absolute;\r\n  left: 12px;\r\n  top: 16px;\r\n  font-size: 16px;\r\n  color: #999;\r\n  background-color: white;\r\n  padding: 0 4px;\r\n  transition: 0.3s ease all;\r\n  pointer-events: none;\r\n\r\n  ${({ isFocused }) =>\r\n    isFocused &&\r\n    css`\r\n      transform: translate(0, -26px);\r\n      font-size: 18px;\r\n      color: #007bff;\r\n    `}\r\n`;\r\n\r\nconst StyledTable = styled.table`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n`;\r\n\r\nconst TableHead = styled.thead`\r\n  background-color: #2b3e50;\r\n  color: white;\r\n`;\r\n\r\nconst TableHeader = styled.th`\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  text-align: left;\r\n  background-color: #2b3e50;\r\n  color: white;\r\n  width: ${({ width }) => width || \"auto\"};\r\n  font-weight: bold;\r\n`;\r\n\r\nconst TableRow = styled.tr`\r\n  &:hover {\r\n    background-color: #f1f1f1;\r\n  }\r\n`;\r\n\r\nconst TableCell = styled.td`\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  text-align: left;\r\n`;\r\n\r\nconst PaginationContainer = styled.div`\r\n  display: flex;\r\n  justify-content: end;\r\n  align-items: center;\r\n  gap: 1rem;\r\n  font-size: 17px;\r\n  border: 1px solid lightgray;\r\n  border-top: 0px;\r\n  padding: 6px;\r\n`;\r\n\r\nconst RowsPerPageContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst PaginationButton = styled.button`\r\n  color: black;\r\n  font-size: 20px;\r\n  border: none;\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n\r\n  &:disabled {\r\n    color: black;\r\n    background-color: none;\r\n  }\r\n\r\n  &:hover {\r\n    background-color: #007bff;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst SelectRowsPerPage = styled.select`\r\n  margin-left: 5px;\r\n  padding: 5px;\r\n`;\r\n\r\nfunction DataGridTable({ columns, rows, onRowClick, ShowSearchBox, ShowXLSXDownloadBtn, ShowPDFDownloadBtn, filename }) {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [isFocused, setIsFocused] = useState(false);\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [selectedRow, setSelectedRow] = useState(null);\r\n\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const currentItems = inputValue.length > 0 ? rows.filter((item) => item.Column_1.includes(inputValue)) : rows;\r\n\r\n  const handleRowClick = (row) => {\r\n    setSelectedRow(row);\r\n    setDialogOpen(true);\r\n  };\r\n\r\n  const totalPages = Math.ceil(currentItems.length / rowsPerPage);\r\n\r\n  const handlePageChange = (newPage) => {\r\n    if (newPage >= 1 && newPage <= totalPages) {\r\n      setCurrentPage(newPage);\r\n    }\r\n  };\r\n\r\n  const onClickXLSXDownload = () => {\r\n    const headers = [\r\n      { key: \"Column_1\", label: \"Column 1\" },\r\n      { key: \"Column_2\", label: \"Column 2\" },\r\n      { key: \"Column_3\", label: \"Column 3\" },\r\n      { key: \"Column_4\", label: \"Column 4\" },\r\n      { key: \"Column_5\", label: \"Column 5\" },\r\n      { key: \"Column_6\", label: \"\" },\r\n    ];\r\n    const workbook = XLSX.utils.book_new();\r\n    const worksheet = XLSX.utils.json_to_sheet(currentItems, {\r\n      header: headers.map((header) => header.key),\r\n      skipHeader: false,\r\n    });\r\n\r\n    // Set custom headers\r\n    for (let i = 0; i < headers.length; i++) {\r\n      const cellRef = XLSX.utils.encode_cell({ c: i, r: 0 });\r\n      worksheet[cellRef].v = headers[i].label;\r\n    }\r\n\r\n    // Add the worksheet to the workbook\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, filename);\r\n\r\n    // Write the workbook and trigger the download\r\n    XLSX.writeFile(workbook, `${filename}.xlsx`);\r\n  };\r\n\r\n  const onClickPDFDownload = () => {\r\n    const doc = new jsPDF();\r\n    const tableColumnHeaders = columns.map((col) => col.headerName);\r\n    const tableRows = currentItems.map((row) =>\r\n      columns.map((col) => row[col.field])\r\n    );\r\n\r\n    doc.autoTable({\r\n      head: [tableColumnHeaders],\r\n      body: tableRows,\r\n    });\r\n\r\n    doc.save(`${filename}.pdf`);\r\n  };\r\n\r\n  const displayedRows = currentItems.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage);\r\n\r\n  return (\r\n    <TableContainer>\r\n      <TableButtonContainer>\r\n        <InputContainer style={{ visibility: !ShowSearchBox ? \"hidden\" : \"\" }}>\r\n          <StyledInput\r\n            type=\"input\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n            onFocus={() => setIsFocused(true)}\r\n            onBlur={() => setIsFocused(!!inputValue)}\r\n            placeholder=\"\"\r\n          />\r\n          <FloatingLabel isFocused={isFocused || inputValue}>Search</FloatingLabel>\r\n        </InputContainer>\r\n        <ExcelContainer style={{ visibility: !ShowXLSXDownloadBtn ? \"hidden\" : \"\" }} onClick={onClickXLSXDownload}>\r\n          <RiFileExcel2Line />\r\n        </ExcelContainer>\r\n        <PDFContainer style={{ visibility: !ShowPDFDownloadBtn ? \"hidden\" : \"\" }} onClick={onClickPDFDownload}>\r\n          <FaRegFilePdf />\r\n        </PDFContainer>\r\n      </TableButtonContainer>\r\n      <StyledTable>\r\n        <TableHead>\r\n          <TableRow>\r\n            {columns.map((col) => (\r\n              <TableHeader key={col.field} width={col.width}>\r\n                {col.headerName}\r\n              </TableHeader>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n        <tbody>\r\n          {displayedRows.map((row) => (\r\n            <TableRow key={row.id} onClick={() => onRowClick(row)}>\r\n              {columns.map((col) => (\r\n                <TableCell key={col.field}>\r\n                  {col.field === \"Column_3\" ? (\r\n                    <a\r\n                      href=\"#\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        handleRowClick(row);\r\n                      }}\r\n                    >\r\n                      {row[col.field]}\r\n                    </a>\r\n                  ) : col.field === \"Column_6\" ? (\r\n                    <button onClick={() => console.log(\"Button clicked!\")}>Action</button>\r\n                  ) : (\r\n                    row[col.field]\r\n                  )}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </tbody>\r\n      </StyledTable>\r\n      <PaginationContainer>\r\n        <RowsPerPageContainer>\r\n          Rows per page:\r\n          <SelectRowsPerPage value={rowsPerPage} onChange={(e) => setRowsPerPage(Number(e.target.value))}>\r\n            <option value={5}>5</option>\r\n            <option value={10}>10</option>\r\n            <option value={15}>15</option>\r\n          </SelectRowsPerPage>\r\n        </RowsPerPageContainer>\r\n        <span>\r\n          {currentPage} of {totalPages}\r\n        </span>\r\n        <PaginationButton onClick={() => handlePageChange(currentPage - 1)} disabled={currentPage === 1}>\r\n          <MdKeyboardArrowLeft />\r\n        </PaginationButton>\r\n        <PaginationButton onClick={() => handlePageChange(currentPage + 1)} disabled={currentPage === totalPages}>\r\n          <MdKeyboardArrowRight />\r\n        </PaginationButton>\r\n      </PaginationContainer>\r\n\r\n      {/* Dialog for row details */}\r\n      {selectedRow && (\r\n        <CustomDialog open={dialogOpen} onClose={() => setDialogOpen(false)}>\r\n          <h2>Row Details</h2>\r\n          <pre>{JSON.stringify(selectedRow, null, 2)}</pre>\r\n        </CustomDialog>\r\n      )}\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nexport default DataGridTable;\r\n"],"names":[],"sourceRoot":""}