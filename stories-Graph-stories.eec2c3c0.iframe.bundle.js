"use strict";(self.webpackChunkmy_storybook_new=self.webpackChunkmy_storybook_new||[]).push([[6633],{"./src/stories/Graph.stories.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AreaChart:()=>Graph_stories_AreaChart,BarChart:()=>Graph_stories_BarChart,DonutChart:()=>DonutChart,LineChart:()=>Graph_stories_LineChart,PieChart:()=>Graph_stories_PieChart,StackedBarChart:()=>StackedBarChart,VerticalBarChart:()=>VerticalBarChart,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Graph_stories});__webpack_require__("./node_modules/react/index.js");var LineChart=__webpack_require__("./node_modules/recharts/es6/chart/LineChart.js"),CartesianGrid=__webpack_require__("./node_modules/recharts/es6/cartesian/CartesianGrid.js"),XAxis=__webpack_require__("./node_modules/recharts/es6/cartesian/XAxis.js"),YAxis=__webpack_require__("./node_modules/recharts/es6/cartesian/YAxis.js"),Tooltip=__webpack_require__("./node_modules/recharts/es6/component/Tooltip.js"),Legend=__webpack_require__("./node_modules/recharts/es6/component/Legend.js"),Line=__webpack_require__("./node_modules/recharts/es6/cartesian/Line.js"),PieChart=__webpack_require__("./node_modules/recharts/es6/chart/PieChart.js"),Pie=__webpack_require__("./node_modules/recharts/es6/polar/Pie.js"),Cell=__webpack_require__("./node_modules/recharts/es6/component/Cell.js"),AreaChart=__webpack_require__("./node_modules/recharts/es6/chart/AreaChart.js"),Area=__webpack_require__("./node_modules/recharts/es6/cartesian/Area.js"),BarChart=__webpack_require__("./node_modules/recharts/es6/chart/BarChart.js"),Bar=__webpack_require__("./node_modules/recharts/es6/cartesian/Bar.js"),ResponsiveContainer=__webpack_require__("./node_modules/recharts/es6/component/ResponsiveContainer.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const sampleData=[{name:"Jan",value:30,value2:50},{name:"Feb",value:45,value2:60},{name:"Mar",value:50,value2:70},{name:"Apr",value:75,value2:100},{name:"May",value:90,value2:120},{name:"Jun",value:60,value2:80}],colors=["#8884d8","#82ca9d","#ffc658","#ff8042"],Graph=_ref=>{let{graphType="bar"}=_ref;return(0,jsx_runtime.jsx)(ResponsiveContainer.u,{width:"100%",height:400,children:(()=>{switch(graphType){case"line":return(0,jsx_runtime.jsxs)(LineChart.b,{data:sampleData,margin:{top:20,right:30,left:20,bottom:5},children:[(0,jsx_runtime.jsx)(CartesianGrid.d,{strokeDasharray:"3 3"}),(0,jsx_runtime.jsx)(XAxis.W,{dataKey:"name"}),(0,jsx_runtime.jsx)(YAxis.h,{}),(0,jsx_runtime.jsx)(Tooltip.m,{}),(0,jsx_runtime.jsx)(Legend.s,{}),(0,jsx_runtime.jsx)(Line.N,{type:"monotone",dataKey:"value",stroke:"#8884d8"})]});case"pie":return(0,jsx_runtime.jsx)(PieChart.r,{children:(0,jsx_runtime.jsx)(Pie.F,{data:sampleData,dataKey:"value",nameKey:"name",cx:"50%",cy:"50%",outerRadius:100,fill:"#8884d8",label:!0,children:sampleData.map(((entry,index)=>(0,jsx_runtime.jsx)(Cell.f,{fill:colors[index%colors.length]},`cell-${index}`)))})});case"donut":return(0,jsx_runtime.jsx)(PieChart.r,{children:(0,jsx_runtime.jsx)(Pie.F,{data:sampleData,dataKey:"value",nameKey:"name",cx:"50%",cy:"50%",innerRadius:60,outerRadius:100,fill:"#8884d8",label:!0,children:sampleData.map(((entry,index)=>(0,jsx_runtime.jsx)(Cell.f,{fill:colors[index%colors.length]},`cell-${index}`)))})});case"area":return(0,jsx_runtime.jsxs)(AreaChart.Q,{data:sampleData,margin:{top:20,right:30,left:0,bottom:0},children:[(0,jsx_runtime.jsx)("defs",{children:(0,jsx_runtime.jsxs)("linearGradient",{id:"colorValue",x1:"0",y1:"0",x2:"0",y2:"1",children:[(0,jsx_runtime.jsx)("stop",{offset:"5%",stopColor:"#8884d8",stopOpacity:.8}),(0,jsx_runtime.jsx)("stop",{offset:"95%",stopColor:"#8884d8",stopOpacity:0})]})}),(0,jsx_runtime.jsx)(XAxis.W,{dataKey:"name"}),(0,jsx_runtime.jsx)(YAxis.h,{}),(0,jsx_runtime.jsx)(CartesianGrid.d,{strokeDasharray:"3 3"}),(0,jsx_runtime.jsx)(Tooltip.m,{}),(0,jsx_runtime.jsx)(Area.G,{type:"monotone",dataKey:"value",stroke:"#8884d8",fillOpacity:1,fill:"url(#colorValue)"})]});case"stackedBar":return(0,jsx_runtime.jsxs)(BarChart.E,{data:sampleData,margin:{top:20,right:30,left:20,bottom:5},children:[(0,jsx_runtime.jsx)(CartesianGrid.d,{strokeDasharray:"3 3"}),(0,jsx_runtime.jsx)(XAxis.W,{dataKey:"name"}),(0,jsx_runtime.jsx)(YAxis.h,{}),(0,jsx_runtime.jsx)(Tooltip.m,{}),(0,jsx_runtime.jsx)(Legend.s,{}),(0,jsx_runtime.jsx)(Bar.y,{dataKey:"value",stackId:"a",fill:"#8884d8"}),(0,jsx_runtime.jsx)(Bar.y,{dataKey:"value2",stackId:"a",fill:"#82ca9d"})]});case"verticalBar":return(0,jsx_runtime.jsxs)(BarChart.E,{layout:"vertical",data:sampleData,margin:{top:20,right:30,left:20,bottom:5},children:[(0,jsx_runtime.jsx)(CartesianGrid.d,{strokeDasharray:"3 3"}),(0,jsx_runtime.jsx)(XAxis.W,{type:"number"}),(0,jsx_runtime.jsx)(YAxis.h,{type:"category",dataKey:"name"}),(0,jsx_runtime.jsx)(Tooltip.m,{}),(0,jsx_runtime.jsx)(Legend.s,{}),(0,jsx_runtime.jsx)(Bar.y,{dataKey:"value",fill:"#8884d8"})]});default:return(0,jsx_runtime.jsxs)(BarChart.E,{data:sampleData,margin:{top:20,right:30,left:20,bottom:5},children:[(0,jsx_runtime.jsx)(CartesianGrid.d,{strokeDasharray:"3 3"}),(0,jsx_runtime.jsx)(XAxis.W,{dataKey:"name"}),(0,jsx_runtime.jsx)(YAxis.h,{}),(0,jsx_runtime.jsx)(Tooltip.m,{}),(0,jsx_runtime.jsx)(Legend.s,{}),(0,jsx_runtime.jsx)(Bar.y,{dataKey:"value",fill:"#8884d8"})]})}})()})},stories_Graph=Graph;Graph.__docgenInfo={description:"",methods:[],displayName:"Graph",props:{graphType:{defaultValue:{value:"'bar'",computed:!1},required:!1}}};const Graph_stories={title:"Components/Graph Component",tags:["autodocs"],component:stories_Graph},Template=args=>(0,jsx_runtime.jsx)(stories_Graph,{...args}),Graph_stories_BarChart=Template.bind({});Graph_stories_BarChart.args={graphType:"bar"},Graph_stories_BarChart.parameters={docs:{source:{code:"import React from 'react';\nimport {\n  BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n  RadialBarChart, RadialBar, LabelList\n} from 'recharts';\nconst sampleData = [\n  { name: 'Jan', value: 30, value2: 50 },\n  { name: 'Feb', value: 45, value2: 60 },\n  { name: 'Mar', value: 50, value2: 70 },\n  { name: 'Apr', value: 75, value2: 100 },\n  { name: 'May', value: 90, value2: 120 },\n  { name: 'Jun', value: 60, value2: 80 },\n];\n\n          <LineChart data={sampleData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" />\n          </LineChart>\n      "}}};const Graph_stories_LineChart=Template.bind({});Graph_stories_LineChart.args={graphType:"line"},Graph_stories_LineChart.parameters={docs:{source:{code:"import React from 'react';\nimport {\n  BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n  RadialBarChart, RadialBar, LabelList\n} from 'recharts';\nconst sampleData = [\n  { name: 'Jan', value: 30, value2: 50 },\n  { name: 'Feb', value: 45, value2: 60 },\n  { name: 'Mar', value: 50, value2: 70 },\n  { name: 'Apr', value: 75, value2: 100 },\n  { name: 'May', value: 90, value2: 120 },\n  { name: 'Jun', value: 60, value2: 80 },\n];\n<PieChart>\n            <Pie data={sampleData} dataKey=\"value\" nameKey=\"name\" cx=\"50%\" cy=\"50%\" outerRadius={100} fill=\"#8884d8\" label>\n              {sampleData.map((entry, index) => (\n                <Cell key={'cell-{index}'} fill={colors[index % colors.length]} />\n              ))}\n            </Pie>\n          </PieChart>"}}};const Graph_stories_PieChart=Template.bind({});Graph_stories_PieChart.args={graphType:"pie"},Graph_stories_PieChart.parameters={docs:{source:{code:"import React from 'react';\nimport {\n  BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n  RadialBarChart, RadialBar, LabelList\n} from 'recharts';\nconst sampleData = [\n  { name: 'Jan', value: 30, value2: 50 },\n  { name: 'Feb', value: 45, value2: 60 },\n  { name: 'Mar', value: 50, value2: 70 },\n  { name: 'Apr', value: 75, value2: 100 },\n  { name: 'May', value: 90, value2: 120 },\n  { name: 'Jun', value: 60, value2: 80 },\n];<PieChart>\n            <Pie\n              data={sampleData}\n              dataKey=\"value\"\n              nameKey=\"name\"\n              cx=\"50%\"\n              cy=\"50%\"\n              innerRadius={60}\n              outerRadius={100}\n              fill=\"#8884d8\"\n              label\n            >\n              {sampleData.map((entry, index) => (\n                <Cell key={'cell-{index}'} fill={colors[index % colors.length]} />\n              ))}\n            </Pie>\n          </PieChart>"}}};const DonutChart=Template.bind({});DonutChart.args={graphType:"donut"},DonutChart.parameters={docs:{source:{code:'import React from \'react\';\nimport {\n  BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n  RadialBarChart, RadialBar, LabelList\n} from \'recharts\';\nconst sampleData = [\n  { name: \'Jan\', value: 30, value2: 50 },\n  { name: \'Feb\', value: 45, value2: 60 },\n  { name: \'Mar\', value: 50, value2: 70 },\n  { name: \'Apr\', value: 75, value2: 100 },\n  { name: \'May\', value: 90, value2: 120 },\n  { name: \'Jun\', value: 60, value2: 80 },\n];\n <AreaChart data={sampleData} margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>\n            <defs>\n              <linearGradient id="colorValue" x1="0" y1="0" x2="0" y2="1">\n                <stop offset="5%" stopColor="#8884d8" stopOpacity={0.8} />\n                <stop offset="95%" stopColor="#8884d8" stopOpacity={0} />\n              </linearGradient>\n            </defs>\n            <XAxis dataKey="name" />\n            <YAxis />\n            <CartesianGrid strokeDasharray="3 3" />\n            <Tooltip />\n            <Area type="monotone" dataKey="value" stroke="#8884d8" fillOpacity={1} fill="url(#colorValue)" />\n          </AreaChart>'}}};const Graph_stories_AreaChart=Template.bind({});Graph_stories_AreaChart.args={graphType:"area"},Graph_stories_AreaChart.parameters={docs:{source:{code:"import React from 'react';\nimport {\n  BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n  RadialBarChart, RadialBar, LabelList\n} from 'recharts';\nconst sampleData = [\n  { name: 'Jan', value: 30, value2: 50 },\n  { name: 'Feb', value: 45, value2: 60 },\n  { name: 'Mar', value: 50, value2: 70 },\n  { name: 'Apr', value: 75, value2: 100 },\n  { name: 'May', value: 90, value2: 120 },\n  { name: 'Jun', value: 60, value2: 80 },\n];<BarChart data={sampleData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"value\" stackId=\"a\" fill=\"#8884d8\" />\n            <Bar dataKey=\"value2\" stackId=\"a\" fill=\"#82ca9d\" />\n          </BarChart>"}}};const StackedBarChart=Template.bind({});StackedBarChart.args={graphType:"stackedBar"},StackedBarChart.parameters={docs:{source:{code:"import React from 'react';\nimport {\n  BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n  RadialBarChart, RadialBar, LabelList\n} from 'recharts';\nconst sampleData = [\n  { name: 'Jan', value: 30, value2: 50 },\n  { name: 'Feb', value: 45, value2: 60 },\n  { name: 'Mar', value: 50, value2: 70 },\n  { name: 'Apr', value: 75, value2: 100 },\n  { name: 'May', value: 90, value2: 120 },\n  { name: 'Jun', value: 60, value2: 80 },\n];<BarChart layout=\"vertical\" data={sampleData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis type=\"number\" />\n            <YAxis type=\"category\" dataKey=\"name\" />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"value\" fill=\"#8884d8\" />\n          </BarChart>"}}};const VerticalBarChart=Template.bind({});VerticalBarChart.args={graphType:"verticalBar"},VerticalBarChart.parameters={docs:{source:{code:"import React from 'react';\nimport {\n  BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n  RadialBarChart, RadialBar, LabelList\n} from 'recharts';\nconst sampleData = [\n  { name: 'Jan', value: 30, value2: 50 },\n  { name: 'Feb', value: 45, value2: 60 },\n  { name: 'Mar', value: 50, value2: 70 },\n  { name: 'Apr', value: 75, value2: 100 },\n  { name: 'May', value: 90, value2: 120 },\n  { name: 'Jun', value: 60, value2: 80 },\n];\n<BarChart data={sampleData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"value\" fill=\"#8884d8\" />\n          </BarChart>"}}};const __namedExportsOrder=["BarChart","LineChart","PieChart","DonutChart","AreaChart","StackedBarChart","VerticalBarChart"];Graph_stories_BarChart.parameters={...Graph_stories_BarChart.parameters,docs:{...Graph_stories_BarChart.parameters?.docs,source:{originalSource:"args => <Graph {...args} />",...Graph_stories_BarChart.parameters?.docs?.source}}},Graph_stories_LineChart.parameters={...Graph_stories_LineChart.parameters,docs:{...Graph_stories_LineChart.parameters?.docs,source:{originalSource:"args => <Graph {...args} />",...Graph_stories_LineChart.parameters?.docs?.source}}},Graph_stories_PieChart.parameters={...Graph_stories_PieChart.parameters,docs:{...Graph_stories_PieChart.parameters?.docs,source:{originalSource:"args => <Graph {...args} />",...Graph_stories_PieChart.parameters?.docs?.source}}},DonutChart.parameters={...DonutChart.parameters,docs:{...DonutChart.parameters?.docs,source:{originalSource:"args => <Graph {...args} />",...DonutChart.parameters?.docs?.source}}},Graph_stories_AreaChart.parameters={...Graph_stories_AreaChart.parameters,docs:{...Graph_stories_AreaChart.parameters?.docs,source:{originalSource:"args => <Graph {...args} />",...Graph_stories_AreaChart.parameters?.docs?.source}}},StackedBarChart.parameters={...StackedBarChart.parameters,docs:{...StackedBarChart.parameters?.docs,source:{originalSource:"args => <Graph {...args} />",...StackedBarChart.parameters?.docs?.source}}},VerticalBarChart.parameters={...VerticalBarChart.parameters,docs:{...VerticalBarChart.parameters?.docs,source:{originalSource:"args => <Graph {...args} />",...VerticalBarChart.parameters?.docs?.source}}}}}]);